# -*- coding: utf-8 -*-
"""project.nm

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A52kHalvNdRqdpisP31ALon8Kkz5Mrx9
"""

# Imports
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import string
import re

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# 1. Data Collection
df = pd.read_csv('Fakenews_data.csv')
print("Data loaded successfully. Shape:", df.shape)

# 2. Data Preprocessing
df = df[['title', 'text']]  # Use relevant columns
df['text'] = df['title'].fillna('') + ' ' + df['text'].fillna('')
df.drop(columns=['title'], inplace=True)

# Add a fake label (since the dataset is "Fake.csv", assume label = 1 for all rows)
df['label'] = 1

# Clean text function
def clean_text(text):
    text = text.lower()
    text = re.sub(r"http\S+|www\S+|https\S+", '', text, flags=re.MULTILINE)  # URLs
    text = re.sub(r'\@w+|\#', '', text)  # mentions and hashtags
    text = re.sub(r'[%s]' % re.escape(string.punctuation), '', text)  # punctuation
    text = re.sub(r'\d+', '', text)  # numbers
    text = text.strip()
    return text

df['clean_text'] = df['text'].apply(clean_text)

# 3. Feature Engineering
tfidf = TfidfVectorizer(stop_words='english', max_df=0.7)
X = tfidf.fit_transform(df['clean_text'])
y = df['label']  # All labels = 1 (fake)

# Here we simulate some real labels by adding "Real" data
# For demo purposes only
real_df = df.sample(frac=1.0).copy()
real_df['label'] = 0
combined = pd.concat([df, real_df])
X = tfidf.fit_transform(combined['clean_text'])
y = combined['label']

# 4. Model Building & 5. Training
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression()
model.fit(X_train, y_train)

# 6. Evaluation
y_pred = model.predict(X_test)
print("\nClassification Report:")

# Capture the report in a variable
report = classification_report(y_test, y_pred)

# Print the report
print(report)

# 7. Visualization
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt="d", cmap="Blues")
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

# 8. Report Writing (Simple Log)
with open("report.txt", "w") as f:
    f.write("Model Evaluation Report\n")
    f.write("------------------------\n")
    f.write(classification_report(y_test, y_pred))
    f.write("\nAccuracy: " + str(accuracy_score(y_test, y_pred)))

# 9. Project Management - Example Logging
print("Project completed and report saved as report.txt")
!pip install gradio

import gradio as gr
import pandas as pd
import numpy as np
import re
import string

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# 1. Data Collection & Preprocessing
df = pd.read_csv('Fakenews_data.csv')
df = df[['title', 'text']]
df['text'] = df['title'].fillna('') + ' ' + df['text'].fillna('')
df.drop(columns=['title'], inplace=True)
df['label'] = 1  # Assume all data is fake initially

# Clean text function
def clean_text(text):
    text = text.lower()
    text = re.sub(r"http\S+|www\S+|https\S+", '', text, flags=re.MULTILINE)
    text = re.sub(r'\@w+|\#', '', text)
    text = re.sub(r'[%s]' % re.escape(string.punctuation), '', text)
    text = re.sub(r'\d+', '', text)
    text = text.strip()
    return text

df['clean_text'] = df['text'].apply(clean_text)

# Simulate real data for demo purposes
real_df = df.sample(frac=1.0).copy()
real_df['label'] = 0
combined = pd.concat([df, real_df])

# 3. Feature Engineering
tfidf = TfidfVectorizer(stop_words='english', max_df=0.7)
X = tfidf.fit_transform(combined['clean_text'])
y = combined['label']

# 4. Model Building & 5. Training
model = LogisticRegression()
model.fit(X, y)  # Train on the entire dataset for this demo

# Prediction function for Gradio
def predict_fakenews(news_text):
    cleaned_text = clean_text(news_text)
    input_text = tfidf.transform([cleaned_text])
    prediction = model.predict(input_text)[0]

    if prediction == 1:
        return "Fake News"
    else:
        return "Real News"

# Gradio Interface
iface = gr.Interface(
    fn=predict_fakenews,
    inputs=gr.Textbox(lines=5, placeholder="Enter news text here..."),
    outputs="text",
    title="Fake News Detection",
    description="Enter news text to check if it's fake or real."
)

iface.launch()